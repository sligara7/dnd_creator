from abc import ABC, abstractmethod
from enum import Enum, auto
from typing import Dict, List, Optional, Union, Any, Set, Tuple

class PersonalityTraitSource(Enum):
    """Enumeration of sources for personality traits in D&D 5e (2024 Edition)."""
    BACKGROUND = auto()   # From character background
    CUSTOM = auto()       # Player-defined
    RANDOM = auto()       # Randomly generated
    CLASS = auto()        # From character class
    SPECIES = auto()      # From character species
    ALIGNMENT = auto()    # From character alignment
    AI_GENERATED = auto() # Generated by AI (Llama 3/Ollama)

class BackstoryElement(Enum):
    """Key elements that make up a character's backstory."""
    ORIGIN = auto()       # Where the character comes from
    FAMILY = auto()       # Family details
    EDUCATION = auto()    # Training and learning
    DEFINING_EVENT = auto() # Major event that shaped the character
    MOTIVATION = auto()   # Why they became an adventurer
    CONNECTIONS = auto()  # Relationships with others
    SECRETS = auto()      # Hidden aspects of their past
    GOALS = auto()        # Future aspirations

class AbstractPersonalityAndBackstory(ABC):
    """
    Abstract base class for handling character personality and backstory in D&D 5e (2024 Edition).
    
    In D&D, a character's personality is defined by several elements:
    - Traits: Short statements that describe character behavior and attitudes
    - Ideals: Core principles and beliefs that motivate the character
    - Bonds: Connections to people, places, or things in the world
    - Flaws: Character weaknesses or vulnerabilities
    
    Additionally, a backstory provides the character's history and connections to the world,
    serving as the foundation for roleplaying and character development.
    """
    
    def __init__(self, 
                 traits: List[str] = None,
                 ideals: List[str] = None,
                 bonds: List[str] = None,
                 flaws: List[str] = None,
                 backstory: str = ""):
        """
        Initialize personality and backstory elements.
        
        Args:
            traits: List of personality traits
            ideals: List of character ideals
            bonds: List of character bonds
            flaws: List of character flaws
            backstory: Character backstory narrative
        """
        self.traits = traits or []
        self.ideals = ideals or []
        self.bonds = bonds or []
        self.flaws = flaws or []
        self.backstory = backstory
        self.backstory_elements = {}
    
    @abstractmethod
    def get_personality_options(self, background: str) -> Dict[str, List[str]]:
        """
        Get personality options based on background.
        
        Args:
            background: Character background
            
        Returns:
            Dict[str, List[str]]: Dictionary with personality options for traits, ideals, bonds, flaws
        """
        pass
    
    @abstractmethod
    def generate_random_personality(self, background: Optional[str] = None) -> Dict[str, List[str]]:
        """
        Generate random personality traits.
        
        Args:
            background: Optional background to base traits on
            
        Returns:
            Dict[str, List[str]]: Dictionary with randomly selected traits, ideals, bonds, flaws
        """
        pass
    
    @abstractmethod
    def generate_ai_backstory(self, character_data: Dict[str, Any]) -> str:
        """
        Use LLM to generate character backstory.
        
        Args:
            character_data: Character information including class, species, background, etc.
            
        Returns:
            str: Generated backstory
        """
        pass
    
    @abstractmethod
    def validate_backstory(self, backstory: str) -> Tuple[bool, str]:
        """
        Check backstory for rule compliance.
        
        Args:
            backstory: Backstory to validate
            
        Returns:
            Tuple[bool, str]: (True if valid, explanation message)
        """
        pass
    
    @abstractmethod
    def get_backstory_hooks(self, backstory: str) -> List[Dict[str, Any]]:
        """
        Extract potential story hooks from backstory.
        
        Args:
            backstory: Character backstory
            
        Returns:
            List[Dict[str, Any]]: List of story hooks extracted from backstory
        """
        pass
    
    @abstractmethod
    def get_background_features(self, background: str) -> Dict[str, Any]:
        """
        Get mechanical features associated with a background.
        
        Args:
            background: Character background
            
        Returns:
            Dict[str, Any]: Background features
        """
        pass
    
    @abstractmethod
    def suggest_personality_by_alignment(self, alignment: Tuple[str, str]) -> Dict[str, List[str]]:
        """
        Suggest personality traits based on alignment.
        
        Args:
            alignment: (ethical, moral) alignment tuple
            
        Returns:
            Dict[str, List[str]]: Suggested personality traits
        """
        pass
    
    @abstractmethod
    def get_personality_compatibility(self, traits: List[str], ideals: List[str], 
                                    bonds: List[str], flaws: List[str]) -> float:
        """
        Calculate internal compatibility of personality elements.
        
        Args:
            traits: List of personality traits
            ideals: List of character ideals
            bonds: List of character bonds
            flaws: List of character flaws
            
        Returns:
            float: Compatibility score (0-1)
        """
        pass
    
    @abstractmethod
    def extract_backstory_elements(self, backstory: str) -> Dict[BackstoryElement, str]:
        """
        Parse backstory into structured elements.
        
        Args:
            backstory: Character backstory
            
        Returns:
            Dict[BackstoryElement, str]: Extracted backstory elements
        """
        pass
    
    @abstractmethod
    def generate_personality_development(self, character_data: Dict[str, Any], 
                                       significant_events: List[str]) -> Dict[str, Any]:
        """
        Generate personality evolution based on character experiences.
        
        Args:
            character_data: Current character information
            significant_events: List of significant events experienced
            
        Returns:
            Dict[str, Any]: Suggested personality changes
        """
        pass
    
    @abstractmethod
    def merge_backstories(self, party_backstories: List[str]) -> Dict[str, Any]:
        """
        Find connections between multiple character backstories.
        
        Args:
            party_backstories: List of backstories from party members
            
        Returns:
            Dict[str, Any]: Suggested connections and shared history
        """
        pass
    
    def to_dict(self) -> Dict[str, Any]:
        """
        Convert personality and backstory to dictionary.
        
        Returns:
            Dict[str, Any]: Dictionary representation
        """
        return {
            "traits": self.traits,
            "ideals": self.ideals,
            "bonds": self.bonds,
            "flaws": self.flaws,
            "backstory": self.backstory,
            "backstory_elements": {
                k.name: v for k, v in self.backstory_elements.items()
            } if self.backstory_elements else {}
        }
    
    def __str__(self) -> str:
        """
        String representation of personality.
        
        Returns:
            str: Formatted personality string
        """
        result = "Personality:\n"
        
        if self.traits:
            result += "  Traits:\n"
            for trait in self.traits:
                result += f"    - {trait}\n"
        
        if self.ideals:
            result += "  Ideals:\n"
            for ideal in self.ideals:
                result += f"    - {ideal}\n"
        
        if self.bonds:
            result += "  Bonds:\n"
            for bond in self.bonds:
                result += f"    - {bond}\n"
        
        if self.flaws:
            result += "  Flaws:\n"
            for flaw in self.flaws:
                result += f"    - {flaw}\n"
        
        if self.backstory:
            result += "\nBackstory Summary:\n"
            # Just include first 100 characters of backstory in string representation
            summary = self.backstory[:100] + "..." if len(self.backstory) > 100 else self.backstory
            result += f"  {summary}\n"
        
        return result