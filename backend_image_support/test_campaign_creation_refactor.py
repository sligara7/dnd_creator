#!/usr/bin/env python3
"""
Test script for the refactored campaign creation service.
Validates the new architecture and discrete creation tasks.
"""

import os
import sys
import asyncio
import json
from datetime import datetime

# Set testing mode to avoid config validation
os.environ["TESTING_MODE"] = "true"

# Add the project root to the Python path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

try:
    from src.services.creation import (
        CampaignCreationService,
        CampaignCreationConfig,
        create_campaign_creation_service
    )
    from src.models.campaign_creation_models import (
        CampaignFromScratchRequest,
        CampaignSkeletonRequest,
        ChapterContentRequest,
        CampaignRefinementRequest,
        CampaignCreationType,
        CampaignRequestFactory
    )
    from src.services.generators import (
        CampaignGenre,
        CampaignComplexity,
        SettingTheme
    )
    from src.services.llm_service import LLMService
    from src.core.config import Settings
    
    print("✓ All imports successful")
    
except ImportError as e:
    print(f"✗ Import error: {e}")
    sys.exit(1)

class MockLLMService:
    """Mock LLM service for testing."""
    
    async def generate_content(self, prompt: str, **kwargs):
        """Return mock content based on prompt type."""
        if "campaign" in prompt.lower():
            return json.dumps({
                "title": "Test Campaign",
                "description": "A mock campaign for testing purposes",
                "themes": ["adventure", "mystery"],
                "gm_notes": "Generated by mock LLM service"
            })
        elif "skeleton" in prompt.lower():
            return json.dumps({
                "major_plot_points": [
                    {"title": "Opening Hook", "description": "Heroes meet"}
                ],
                "chapter_outlines": [
                    {"session": 1, "title": "Chapter 1", "summary": "Introduction"}
                ]
            })
        else:
            return "Mock generated content for testing"

async def test_campaign_creation_models():
    """Test campaign creation model validation."""
    print("\n=== Testing Campaign Creation Models ===")
    
    # Test valid campaign request
    try:
        valid_concept = " ".join(["Test word"] * 60)  # 120 words
        request = CampaignFromScratchRequest(
            concept=valid_concept,
            genre=CampaignGenre.FANTASY,
            complexity=CampaignComplexity.MEDIUM,
            session_count=8
        )
        print("✓ Valid campaign request created")
    except Exception as e:
        print(f"✗ Valid request creation failed: {e}")
        return False
    
    # Test request factory
    try:
        data = {
            "concept": valid_concept,
            "genre": "fantasy",
            "session_count": 10
        }
        factory_request = CampaignRequestFactory.create_request(
            CampaignCreationType.CAMPAIGN_FROM_SCRATCH,
            data
        )
        print("✓ Request factory working")
    except Exception as e:
        print(f"✗ Request factory failed: {e}")
        return False
    
    return True

async def test_campaign_service_initialization():
    """Test campaign creation service initialization."""
    print("\n=== Testing Service Initialization ===")
    
    try:
        mock_llm = MockLLMService()
        config = CampaignCreationConfig(
            base_timeout=60,
            auto_save=False,
            use_character_service=False  # Disable for testing
        )
        settings = Settings()
        
        service = create_campaign_creation_service(mock_llm, config, settings)
        print("✓ Campaign creation service initialized")
        
        # Test service status
        status = service.get_service_status()
        print(f"✓ Service status: {status['status']}")
        print(f"✓ Available creators: {len(status['creators'])}")
        
        return service
        
    except Exception as e:
        print(f"✗ Service initialization failed: {e}")
        return None

async def test_campaign_from_scratch():
    """Test Task 1: Campaign creation from scratch."""
    print("\n=== Testing Task 1: Campaign From Scratch ===")
    
    service = await test_campaign_service_initialization()
    if not service:
        return False
    
    try:
        # Create test request
        concept = "A steampunk campaign where airship pirates battle corporate sky fleets over floating cities while ancient magic awakens beneath the clouds. The heroes must navigate political intrigue, technological wonders, and mystical threats to prevent a war that could shatter the sky realm."
        
        request = CampaignFromScratchRequest(
            concept=concept,
            genre=CampaignGenre.STEAMPUNK,
            complexity=CampaignComplexity.MEDIUM,
            session_count=8,
            themes=["airship_pirates", "corporate_intrigue", "ancient_magic"],
            party_level=3,
            party_size=4,
            use_character_service=False  # Disable for testing
        )
        
        print("Creating campaign from scratch...")
        response = await service.create_content(request)
        
        if response.success:
            print("✓ Campaign creation successful")
            print(f"✓ Creation type: {response.creation_type}")
            print(f"✓ Generation time: {response.performance.generation_time:.2f}s")
            if response.warnings:
                print(f"⚠ Warnings: {response.warnings}")
            return True
        else:
            print(f"✗ Campaign creation failed: {response.error}")
            return False
            
    except Exception as e:
        print(f"✗ Campaign creation test failed: {e}")
        return False

async def test_chapter_creation():
    """Test Task 2: Chapter creation with character integration."""
    print("\n=== Testing Task 2: Chapter Creation ===")
    
    service = await test_campaign_service_initialization()
    if not service:
        return False
    
    try:
        # Create test request
        concept = "The heroes must infiltrate a floating corporate headquarters to steal data about illegal magical experiments."
        
        request = ChapterContentRequest(
            concept=concept,
            campaign_title="Sky Pirates Revolution",
            campaign_description="Steampunk airship campaign",
            chapter_title="Data Heist at Nimbus Tower",
            chapter_summary="Corporate infiltration and data theft mission",
            genre=CampaignGenre.STEAMPUNK,
            setting_theme=SettingTheme.STEAMPUNK,
            complexity=CampaignComplexity.MEDIUM,
            themes=["stealth", "heist", "corporate_intrigue"],
            party_level=4,
            party_size=4,
            use_character_service=False  # Disable for testing
        )
        
        print("Creating chapter content...")
        response = await service.create_content(request)
        
        if response.success:
            print("✓ Chapter creation successful")
            print(f"✓ Creation type: {response.creation_type}")
            print(f"✓ Generation time: {response.performance.generation_time:.2f}s")
            return True
        else:
            print(f"✗ Chapter creation failed: {response.error}")
            return False
            
    except Exception as e:
        print(f"✗ Chapter creation test failed: {e}")
        return False

async def test_campaign_refinement():
    """Test Task 3: Campaign refinement system."""
    print("\n=== Testing Task 3: Campaign Refinement ===")
    
    service = await test_campaign_service_initialization()
    if not service:
        return False
    
    try:
        # Mock existing campaign data
        existing_campaign = {
            "title": "Test Campaign",
            "description": "A basic campaign for testing",
            "themes": ["adventure"],
            "status": "draft"
        }
        
        request = CampaignRefinementRequest(
            existing_data=existing_campaign,
            refinement_prompt="Add more social encounters and reduce combat focus. Include more political intrigue.",
            refinement_type="enhance",
            preserve_elements=["title", "core_concept"],
            player_feedback=["More social interaction", "Less combat"]
        )
        
        print("Refining campaign...")
        response = await service.refine_content(request)
        
        if response.success:
            print("✓ Campaign refinement successful")
            print(f"✓ Evolution type: {response.evolution_type}")
            print(f"✓ Cycles completed: {response.cycles_completed}")
            return True
        else:
            print(f"✗ Campaign refinement failed: {response.error}")
            return False
            
    except Exception as e:
        print(f"✗ Campaign refinement test failed: {e}")
        return False

async def test_service_performance():
    """Test service performance tracking."""
    print("\n=== Testing Service Performance ===")
    
    service = await test_campaign_service_initialization()
    if not service:
        return False
    
    try:
        # Run multiple operations to test performance tracking
        concept = "A quick test campaign for performance testing. " * 20  # Make it long enough
        
        for i in range(3):
            request = CampaignFromScratchRequest(
                concept=concept,
                genre=CampaignGenre.FANTASY,
                session_count=5,
                use_character_service=False
            )
            
            await service.create_content(request)
        
        # Check performance stats
        status = service.get_service_status()
        creator_stats = status["creator_stats"]
        
        if "campaign_from_scratch" in creator_stats:
            stats = creator_stats["campaign_from_scratch"]
            print(f"✓ Total creations: {stats['total_creations']}")
            print(f"✓ Successful: {stats['successful_creations']}")
            print(f"✓ Average time: {stats['avg_creation_time']:.2f}s")
            return True
        else:
            print("✗ Performance stats not found")
            return False
            
    except Exception as e:
        print(f"✗ Performance test failed: {e}")
        return False

async def main():
    """Run all campaign creation tests."""
    print("Campaign Creation Service Test Suite")
    print("=" * 50)
    
    tests = [
        ("Model Validation", test_campaign_creation_models),
        ("Service Initialization", test_campaign_service_initialization),
        ("Campaign From Scratch", test_campaign_from_scratch),
        ("Chapter Creation", test_chapter_creation),
        ("Campaign Refinement", test_campaign_refinement),
        ("Performance Tracking", test_service_performance)
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        try:
            if await test_func():
                passed += 1
                print(f"✓ {test_name} PASSED")
            else:
                print(f"✗ {test_name} FAILED")
        except Exception as e:
            print(f"✗ {test_name} ERROR: {e}")
        
        print("-" * 30)
    
    print(f"\nTest Results: {passed}/{total} passed")
    
    if passed == total:
        print("🎉 All tests passed! Campaign creation service is working.")
    else:
        print("⚠️  Some tests failed. Review the output above.")
    
    return passed == total

if __name__ == "__main__":
    asyncio.run(main())
