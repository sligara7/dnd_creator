version: '3.8'

services:
  # PostgreSQL Database
  database:
    image: postgres:15-alpine
    container_name: dnd_character_db_dev
    environment:
      POSTGRES_DB: dnd_characters
      POSTGRES_USER: dnd_user
      POSTGRES_PASSWORD: ${DB_PASSWORD:-change_this_password}
    volumes:
      - postgres_data_dev:/var/lib/postgresql/data
      - ./sql/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - dnd_network_dev
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U dnd_user -d dnd_characters"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Ollama LLM Service
  ollama:
    build: 
      context: ../ai_services/ollama
      dockerfile: Dockerfile
    container_name: dnd_character_llm_dev
    ports:
      - "11434:11434"
    volumes:
      - ollama_data_dev:/root/.ollama
      - ../ai_services/ollama/prompt_templates:/app/prompt_templates
      - ../ai_services/ollama/rules_data:/app/rules_data
    networks:
      - dnd_network_dev
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    command: >
      sh -c "ollama serve & sleep 5 && ollama pull llama3:8b && tail -f /dev/null"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/version"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Backend FastAPI Service
  backend:
    build: 
      context: .
      dockerfile: Dockerfile.new
    container_name: dnd_character_api_dev
    environment:
      # Database Configuration
      DATABASE_URL: postgresql://dnd_user:${DB_PASSWORD:-change_this_password}@database:5432/dnd_characters
      
      # LLM Configuration
      LLM_PROVIDER: ${LLM_PROVIDER:-ollama}
      OLLAMA_API_URL: http://ollama:11434/api
      LLM_MODEL: ${LLM_MODEL:-llama3:8b}
      
      # External LLM APIs (if needed)
      OPENAI_API_KEY_FILE: /run/secrets/openai_api_key
      ANTHROPIC_API_KEY_FILE: /run/secrets/anthropic_api_key
      
      # API Configuration
      SECRET_KEY: ${SECRET_KEY:-dev-secret-key}
      DEBUG: ${DEBUG:-true}
      LOG_LEVEL: ${LOG_LEVEL:-DEBUG}
      
      # CORS Configuration (allow all for development)
      CORS_ORIGINS: ${CORS_ORIGINS:-*}
      
    ports:
      - "8000:8000"
    depends_on:
      database:
        condition: service_healthy
      ollama:
        condition: service_healthy
    networks:
      - dnd_network_dev
    volumes:
      - ./logs:/app/logs
      - .:/app  # Mount source code for development
    secrets:
      - openai_api_key
      - anthropic_api_key
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

volumes:
  postgres_data_dev:
  ollama_data_dev:

networks:
  dnd_network_dev:
    driver: bridge

# Secrets management for secure API key handling
secrets:
  openai_api_key:
    environment: "OPENAI_API_KEY"
  anthropic_api_key:
    environment: "ANTHROPIC_API_KEY"
