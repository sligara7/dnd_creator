version: '3.8'

services:
  campaign:
    build:
      context: .
      dockerfile: Dockerfile
    image: campaign-service:latest
    container_name: campaign-service
    restart: unless-stopped
    environment:
      - ENV=development
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=campaign
      - POSTGRES_USER=campaign_user
      - POSTGRES_PASSWORD=campaign_pass
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USER=campaign_user
      - RABBITMQ_PASSWORD=campaign_pass
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - LOG_LEVEL=DEBUG
    ports:
      - "8000:8000"
    volumes:
      - ./src:/app/src
      - ./data:/app/data
      - ./logs:/app/logs
    depends_on:
      - postgres
      - rabbitmq
    networks:
      - campaign-net
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.campaign.rule=Host(`campaign.localhost`)"
      - "traefik.http.services.campaign.loadbalancer.server.port=8000"

  postgres:
    image: postgres:15-alpine
    container_name: campaign-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=campaign
      - POSTGRES_USER=campaign_user
      - POSTGRES_PASSWORD=campaign_pass
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - campaign-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U campaign_user -d campaign"]
      interval: 10s
      timeout: 5s
      retries: 5

  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: campaign-rabbitmq
    restart: unless-stopped
    environment:
      - RABBITMQ_DEFAULT_USER=campaign_user
      - RABBITMQ_DEFAULT_PASS=campaign_pass
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - campaign-net
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_running"]
      interval: 30s
      timeout: 10s
      retries: 5

  prometheus:
    image: prom/prometheus:latest
    container_name: campaign-prometheus
    restart: unless-stopped
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - "9090:9090"
    networks:
      - campaign-net

  grafana:
    image: grafana/grafana:latest
    container_name: campaign-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/var/lib/grafana/dashboards
    ports:
      - "3000:3000"
    networks:
      - campaign-net
    depends_on:
      - prometheus

  traefik:
    image: traefik:v2.9
    container_name: campaign-traefik
    restart: unless-stopped
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
    ports:
      - "80:80"
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - campaign-net

volumes:
  postgres_data:
  rabbitmq_data:
  prometheus_data:
  grafana_data:

networks:
  campaign-net:
    driver: bridge
