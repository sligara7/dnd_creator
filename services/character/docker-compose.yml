version: '3.8'

services:
  character_service:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      # Service Configuration
      - API_V1_STR=/api/v1
      - PROJECT_NAME=D&D Character Service
      - VERSION=2.0.0
      - ENVIRONMENT=development
      
      # Database Configuration
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/character_service
      
      # Service Integration URLs
      - MESSAGE_HUB_URL=http://message-hub:8200
      - CAMPAIGN_SERVICE_URL=http://campaign-service:8001
      - IMAGE_SERVICE_URL=http://image-service:8002
      - CATALOG_SERVICE_URL=http://catalog-service:8003
      - LLM_SERVICE_URL=http://llm-service:8100
      
      # Cache Configuration
      - REDIS_URL=redis://redis:6379/0
      
      # Metrics Configuration
      - METRICS_ENABLED=true
      - PROMETHEUS_MULTIPROC_DIR=/tmp
    volumes:
      - ./logs:/app/logs
      - prometheus_data:/tmp
    depends_on:
      - db
      - redis
    networks:
      - dnd_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  db:
    image: postgres:14-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=character_service
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - dnd_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - dnd_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s

  prometheus:
    image: prom/prometheus:v2.45.0
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - dnd_network
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'

  grafana:
    image: grafana/grafana:10.0.3
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - dnd_network
    restart: unless-stopped
    depends_on:
      - prometheus

networks:
  dnd_network:
    name: dnd_network
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:
