[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "character-service"
version = "0.1.0"
description = "D&D Character Creation and Management Service"
authors = ["OpenSourceLoot <dnd@opensourceloot.dev>"]
readme = "README.md"
packages = [{include = "character_service", from = "src"}]

[tool.poetry.dependencies]
python = "^3.11"
fastapi = "^0.103.0"
uvicorn = {extras = ["standard"], version = "^0.23.0"}
sqlalchemy = {extras = ["asyncio"], version = "^2.0.20"}
alembic = "^1.11.3"
asyncpg = "^0.28.0"
pydantic = {extras = ["email"], version = "^2.3.0"}
pydantic-settings = "^2.0.3"
python-jose = {extras = ["cryptography"], version = "^3.3.0"}
passlib = {extras = ["bcrypt"], version = "^1.7.4"}
python-multipart = "^0.0.6"
httpx = "^0.24.1"
redis = {extras = ["hiredis"], version = "^5.0.0"}
prometheus-client = "^0.17.1"
psycopg = "^3.2.9"
rodi = "^2.0.8"
aiohttp = "^3.12.15"

[tool.poetry.group.dev.dependencies]
pytest = "^7.4.0"
pytest-cov = "^4.1.0"
pytest-asyncio = "^0.21.1"
black = "^23.7.0"
isort = "^5.12.0"
ruff = "^0.0.286"
mypy = "^1.5.1"
factory-boy = "^3.3.0"
pytest-env = "^1.0.1"
coverage = {extras = ["toml"], version = "^7.3.0"}
ipython = "^8.14.0"
pytest-mock = "^3.11.1"
aiosqlite = "^0.19.0"  # For testing

[tool.poetry.scripts]
start = "character_service.main:start"
dev = "character_service.main:dev"

[tool.black]
line-length = 88
target-version = ["py39", "py310", "py311"]
include = '\.pyi?$'

[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.ruff]
line-length = 88
target-version = "py311"
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "C",  # flake8-comprehensions
    "B",  # flake8-bugbear
]
ignore = []

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_optional = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
disallow_incomplete_defs = false

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
addopts = """
    --strict-markers
    --tb=short
    --cov=src
    --cov-report=term-missing
    --cov-report=xml
    --cov-report=html
    --no-cov-on-fail
"""
asyncio_mode = "auto"

[tool.coverage.run]
branch = true
source = ["src"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if TYPE_CHECKING:",
    "raise NotImplementedError",
    "if __name__ == .__main__.",
    "pass",
    "..."
]
